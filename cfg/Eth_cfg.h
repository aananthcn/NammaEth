#ifndef NAMMA_AUTOSAR_ETH_CFG_H
#define NAMMA_AUTOSAR_ETH_CFG_H

// This file is autogenerated, any hand modifications will be lost!

#include <Platform_Types.h>

#define ETH_DRIVER_MAX_CHANNEL    (2)


typedef struct {
    uint16  mainfn_period_ms;
    uint8   index;
    boolean dev_error_detect;
    boolean get_cntr_val_api;
    boolean get_rx_stats_api;
    boolean get_tx_stats_api;
    boolean get_tx_erctv_api; /* EthGetTxErrorCounterValuesApi */
    boolean get_gbl_time_api;
    uint8   max_ctrl_suportd;
    boolean version_info_api;
} EthGeneralCfgType;


typedef struct {
    boolean en_cksum_ipv4;
    boolean en_cksum_icmp;
    boolean en_cksum_tcp;
    boolean en_cksum_udp;
} EthCtrlOffloadingType;


typedef enum {
    ETH_MAC_LAYER_SPEED_10M,
    ETH_MAC_LAYER_SPEED_100M,
    ETH_MAC_LAYER_SPEED_1G,
    ETH_MAC_LAYER_SPEED_2500M,
    ETH_MAC_LAYER_SPEED_10G
} EthCtrlMacLayerSpeed;


typedef enum {
    ETH_MAC_LAYER_TYPE_XMII,
    ETH_MAC_LAYER_TYPE_XGMII,
    ETH_MAC_LAYER_TYPE_XXGMII
} EthCtrlMacLayerType;


typedef enum {
    REDUCED,
    REVERSED,
    SERIAL,
    STANDARD,
    UNIVERSAL_SERIAL
} EthCtrlMacLayerSubType;


typedef struct {
    boolean                 buf_handlg;
    boolean                 enable_mii;
    boolean                 enable_spi;
    boolean                 en_rx_intr;
    boolean                 en_tx_intr;
    uint8                   ctrl_index;
    EthCtrlMacLayerSpeed    mac_lr_spd;
    EthCtrlMacLayerType     mac_lr_typ;
    EthCtrlMacLayerSubType  mac_sb_typ;
    uint8                   mac_addres[6];
} EthCtrlConfigType;


typedef struct {
    const EthGeneralCfgType     general;
    const EthCtrlOffloadingType offload;
    const EthCtrlConfigType     ctrlcfg;
} Eth_ConfigType;



extern const Eth_ConfigType EthConfigs[ETH_DRIVER_MAX_CHANNEL];


#endif
